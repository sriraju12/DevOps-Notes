SRE(Site Reliability Engineer):

what do they:

Automation

Monitoring - monitoring applications, creating alerts

Incident Management - when you get some failure alerts, what steps would you take to resolve it i.e from starting to end of the issue.

Error Budgets - maximum amount of acceptable downtime a service can have over a specific period without upsetting users.
                It's the inverse of a Service Level Objective (SLO).

                The concept of an error budget is used to balance the competing interests of the development team (who want to release new features quickly)
                and the operations team (who want to maintain a stable and reliable system).

                1. Define SLOs: First, you must establish a Service Level Objective (SLO), which is the desired level of reliability for your service.
                   For example, an SLO for an e-commerce website might be 99.9% availability over a month. This means the service should be available 
                   for 99.9% of the time.

                2. Calculate the Error Budget: The error budget is the remaining percentage. If your SLO is 99.9% availability, your error budget
                   is 100%âˆ’99.9%=0.1%. This 0.1% represents the acceptable amount of downtime or failed requests. For a month with 43,200 minutes 
                   (30 days x 24 hours x 60 minutes), a 0.1% error budget translates to 43.2 minutes of allowed downtime.

                3. Use it for Decision-Making: The error budget acts as a buffer. As long as the service is meeting its SLO (meaning it hasn't used up its
                   error budget), development teams can take risks and release new features. However, once the error budget is exhausted, it's a signal to 
                   stop all non-essential releases and focus on improving system stability and addressing the root causes of the errors that
                   consumed the budget. This is often referred to as a "code freeze."


Toil - Reducing of Repeatative/Manual work 

       Example: Manually restarting a service that frequently crashes.

                Manually provisioning a new server or virtual machine for an application.



SLA, SLO, SLI:

SLA(Service Level Agreement) - Agreement made between you and the client or users

SLO(Service Level Objectives) - Objectives(points) your team must hit to meet that agreement.

SLI(Service Level Indicators) - The real numbers on your performance


Observability - Monitoring + Logging + Tracing

Monitoring - Here we will monitors the health the application, nodes and creating alerts for failure cases i.e Popular tools are Prometheus, Grafana

Logging - Here we can check the logs for failures i.e Popular tool is ELK or EFK

Tracing - Here we can trace the request from source to destination like how it is flowing and where it is reaching i.e Popular tool is Jaegar


Anti Fragility - An antifragile system is one that learns from and benefits from disorder, volatility, and failures. It is a system that, when a component fails, 
                 becomes even more reliable and capable than it was before.

                 Example:  a single, manually configured server for a high-traffic website is fragile. If the traffic spikes, the server crashes.

                           a high-traffic website would be one that gets stronger and more reliable as traffic spikes, rather than crashing. It's a system    
                           designed to benefit from the very stress that would cause a fragile system to fail.




Incident Management steps:

1. Incident detection/ incident reporting:

   monitoring systems - continuous monitoring of systems, applications and infrastructure to detect abnormalities from expected behaviour.

   Alerting - configuring alerting mechanism to notify the appropriate personnel or teams when predefined threshold or conditions are breached.

   User Reports - User or Customer may report incident through various channels such as customer support or feedback



2. Incident Triage:

   Prioritization - Evaluate the severity and impact of the incident to priotitize the incident. classify the incident based on their potential impact
                    on users and business operations.

   Assignment - Assign responsibilities to the appropriate individual or team based on theie expertise and availability.

   Here like some incidents you may resolve and some incidents you may not resolve at that time you will assign to another person or team



3.Resolution:
   
   Mitigation- implements temporary fixes or workaround to restore the service functionality quickly

   Permanent Fix: identify the root cause of the issue and fix it to prevent reoccurance.

   Here like after you assign to someone they will resolve it. 


4. Communication and Reporting:

    status updates - provide regular status updates to stakeholders throughout the incident lifecycle.

    Closure - communicate the resolution of the incident to internal teams.

    Here you just need to follow upon the incident for the fix.


5. Root Cause Analysis(RCA):

   Investigation - conduct a thorough investigation to identify the root cause of the incident. This may involve examing logs, analysing of code and reviewing configuration settings.

   Documentation - Document the findings of the root cause analysis, including contributing factors and potential preventive measures.

   Here like we need to document the incident i.e reason for failure, fix for it, priority like P0 or p1, will it occur again etc.


Important Linux Directories:

/var -> This folder contains all the logs of the application and also database logs for troubleshooting purpose

/etc -> it contains configuration files.

* in the server public key is stored in home directory of .ssh and then go inside of it, their is file called authorized_keys, here the public key is stored.

* private key is stored in our local system.

   
Http Status Codes:

1xx - information

2xx - success

3xx - client error

4xx - server error

      400 - when you are trying to access the url but server is not able to process due to malformed request syntax

      401 -  unauthorized access i.e lack of vaild credentials

      403 - forbidden i.e a 403 error is returned when the client has provided credentials, but those credentials do not grant them permission to access the specific resource. 

      404 - A 404 error is returned when a client tries to access a URL that doesn't correspond to any existing file, page, or API endpoint on the server.
            The server is working, but the specific item requested simply isn't there.

500 - A 500 error is a server-side error. This means the problem is not with the client's request (unlike a 4xx error) but with the server itself.
      The server cannot be more specific about the exact error because it is an unforeseen issue. 

      This is due to database server error.



if the web server is not working then first you need to see what kind of web server is using like httpd or nginx -> /var/log

next check whether that web server is running or not -> systemctl status httpd or sytemctl status nginx

if it is in inactive state then start the web server -> systemctl start httpd or nginx

logs of the web server present in this location -> /var/log/httpd

in httpd, two logs files are present, access_log, error_log. 


var/log -> all the log files are present here

tail -f error.log -> this command is used to show the latest logs

var/log/auth.log / secure -> security related logs can be found in this file


Monitoting tools helps in identify the issue and it also tells you the performance of the system or application.

logging tools helps in troubleshooting the issue and it also you gives you the events like what happened.

SRE Interview Questions:

1. what is runbook:
                    A runbook is a documented procedure for handling specific tasks or incidents.it helps on-call engineers take consistent action without escalating.
                    
                    For Example:
                                runbook for disk space issues may include checking disk space, removing old logs and restarting the service.



2. what is toil:
                 Toil is manual, repetative and automated work that has no long term values and scales linearly with service growth.

                 For Example:
                              like reboot of the system or manual deployment are performed repetatively.


3. your web app is running slowly. what steps would you take:

                                                              * start checking metrics like latency, error rates and response time

                                                              * then review the logs for timeouts or exceptions.

                                                              * use APM(Application Performance Monitoring) tools like datadog or newrelic or dynatrace tools to trace requests.
                                                                to pinpoint the which service or functions causing delays.

                                                              * look for backend bottlenecks, DB issues or high traffic.


4. you receive an alert at 3 am. how do you respond:
                                                     * first acknowledge the alert to aviod duplication

                                                     * check the dashboards and logs to analyze the root cause of the issue.

                                                     * determine if the issue is user impacting and priortize it.

                                                     * apply a quick fix or rollback if possible.


5. what is blameless postmortem:
                                 it is a retrospective after an incident where focus is on understanding what happened and why, rather than assigning blame.


6. what are error budgets:
                           an error budget is an acceptable amount of failure a service can have in a given period, calculated as 100% SLO
                           i.e how much downtime a system can afford without upsetting the consumers and also know as margin of error permitted
                           by the SLO
            

7. how do you ensure zero downtime deployments:
                                                * implement rolling, canary or bule/green deployments.

                                                * use readiness and liveness probes in k8s

                                                * ensure proper health checks

                                                * use circuit breakers and retries.


8. explain incident responce lifecycle:
                                        lifecycle steps are: * detection - you will get automated alerts or user reports that detects the incident

                                                             * response - first you need to acknowledge and then investigate it and then mitigate the incident.

                                                             * communication - once the incident is detected and you also responded, next you need to communicate with
                                                                               your team or stakeholders about the incident.

                                                             * resolution - apply the fix and verify the service.

                                                             * postmortem - find the root cause and document it and implement improvements.


9. database latency has been increased. what would you do:
                                                           * check the DB's cpu and memory usage.

                                                           * identify the slow quries using EXPLAIN

                                                           * review recent schema/index change

                                                           * analyze connection pool saturation.


10. a noisy neighbor pod is impacting others in your k8s cluster. what steps would you take:
                                                                                             * set CPU/Memory limits and requests

                                                                                             * use node affinity and taint/tolerations

                                                                                             * isolate critical services in different namespace or nodes

                                                                                             * implement QoS classes


11. why horizontal scalling is preferred:
                                          * it needs less money up front

                                          * it lowers administrative costs

                                          * facilitates simpler scalability as demand raises


12. you are getting frequent noisy alerts. what do you do:
                                                           * review and tune thresholds

                                                           * suppress low-priority alerts

                                                           * implement alert deduplication and grouping

                                                           * use rate-limiting for flapping alerts

                                                           * prioritize actionable alert.


13. describe how would you create a post incident report:
                                                          post incident report should include a clear timeline of events, the root cause analysis, the impact of the incident
                                                          and steps taken to resolve it.


14. how would you manage software deployments to minimize the risks:
                                                                     to reduce the risks of deployment, i have strategies such as canary releases, where changes are rollled out
                                                                     to a small subset of users before a full rollout.




      

            
                           


                
